// Mocks generated by Mockito 5.2.0 from annotations
// in tdd_clean/test/features/free_games/domain/usecases/get_games_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tdd_clean/core/error/failures.dart' as _i7;
import 'package:tdd_clean/features/free_games/data/mappers/domain_game_mapper.dart'
    as _i9;
import 'package:tdd_clean/features/free_games/data/mappers/game_mapper.dart'
    as _i8;
import 'package:tdd_clean/features/free_games/data/models/game.dart' as _i4;
import 'package:tdd_clean/features/free_games/data/repositories/game_repository_impl.dart'
    as _i5;
import 'package:tdd_clean/features/free_games/domain/entities/domain_game.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeDomainGame_1 extends _i1.Fake implements _i3.DomainGame {}

class _FakeGame_2 extends _i1.Fake implements _i4.Game {}

/// A class which mocks [GameRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameRepositoryImpl extends _i1.Mock
    implements _i5.GameRepositoryImpl {
  MockGameRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, _i3.DomainGame>> getGame(int? id) =>
      (super.noSuchMethod(Invocation.method(#getGame, [id]),
          returnValue: Future<_i2.Either<_i7.Failure, _i3.DomainGame>>.value(
              _FakeEither_0<_i7.Failure, _i3.DomainGame>())) as _i6
          .Future<_i2.Either<_i7.Failure, _i3.DomainGame>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i3.DomainGame>>> getGamesByPlatform(
          String? platform) =>
      (super.noSuchMethod(Invocation.method(#getGamesByPlatform, [platform]),
              returnValue:
                  Future<_i2.Either<_i7.Failure, List<_i3.DomainGame>>>.value(
                      _FakeEither_0<_i7.Failure, List<_i3.DomainGame>>()))
          as _i6.Future<_i2.Either<_i7.Failure, List<_i3.DomainGame>>>);
  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i3.DomainGame>>> getGamesList() =>
      (super.noSuchMethod(Invocation.method(#getGamesList, []),
              returnValue:
                  Future<_i2.Either<_i7.Failure, List<_i3.DomainGame>>>.value(
                      _FakeEither_0<_i7.Failure, List<_i3.DomainGame>>()))
          as _i6.Future<_i2.Either<_i7.Failure, List<_i3.DomainGame>>>);
}

/// A class which mocks [GameMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameMapper extends _i1.Mock implements _i8.GameMapper {
  MockGameMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.DomainGame map(Map<String, dynamic>? json) =>
      (super.noSuchMethod(Invocation.method(#map, [json]),
          returnValue: _FakeDomainGame_1()) as _i3.DomainGame);
}

/// A class which mocks [DomainGameMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDomainGameMapper extends _i1.Mock implements _i9.DomainGameMapper {
  MockDomainGameMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Game map(_i3.DomainGame? domainGame) =>
      (super.noSuchMethod(Invocation.method(#map, [domainGame]),
          returnValue: _FakeGame_2()) as _i4.Game);
}
